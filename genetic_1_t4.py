# -*- coding: utf-8 -*-
"""Genetic_1_T4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ZQE1x0nv8sZScn7YK5rNDt2o5c-VUuV
"""

import random
num_junctions = 4 
pop_size = 5  
generations = 5  
mutation_rate = 0.2  
min_time, max_time = 10, 60 
traffic_data = [100, 200, 150, 250]  

def create_chromosome():
    return [random.randint(min_time, max_time) for _ in range(num_junctions)]

def fitness(chromosome):
    return sum(abs(traffic_data[i] / chromosome[i]) for i in range(num_junctions))

def select_population(population, fitness_scores):
    sorted_population = sorted(zip(population, fitness_scores), key=lambda x: x[1])
    selected = sorted_population[:max(1, len(population) // 2)]  # Keep top 50%
    print("\n Selected Population (Best Half):")
    for ch, f in selected:
        print(f"  {ch} | Fitness: {round(f, 2)}")
    return [p for p, _ in selected]

def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1) 
    child = parent1[:point] + parent2[point:]
    print(f"Crossover: {parent1} + {parent2} → {child}")
    return child

def mutate(chromosome):
    if random.random() < mutation_rate:
        i = random.randint(0, len(chromosome) - 1)
        old_value = chromosome[i]
        chromosome[i] = max(min_time, min(max_time, chromosome[i] + random.randint(-5, 5)))
        print(f" Mutation at index {i}: {old_value} → {chromosome[i]}")
    return chromosome

def genetic_algorithm():
    population = [create_chromosome() for _ in range(pop_size)]

    print("\n Initial Population:")
    for ch in population:
        print(f"  {ch}")

    for gen in range(generations):
        print(f"\n Generation {gen + 1}")

        fitness_scores = [fitness(ch) for ch in population]

        print(" Fitness Scores:")
        for i in range(len(population)):
            print(f"  {population[i]} | Fitness: {round(fitness_scores[i], 2)}")

        population = select_population(population, fitness_scores)
        next_gen = [crossover(random.choice(population), random.choice(population)) for _ in range(len(population))]

        population = [mutate(ch) for ch in next_gen]

    best_solution = min(population, key=lambda ch: fitness(ch))
    print("\n Final Optimized Green Light Timings:", best_solution)

genetic_algorithm()